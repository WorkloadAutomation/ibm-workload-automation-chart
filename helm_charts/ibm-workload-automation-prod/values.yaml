####################################################################
# Licensed Materials Property of HCL*
# (c) Copyright HCL Technologies Ltd. 2020. All rights reserved.
#
# * Trademark of HCL Technologies Limited
####################################################################
global:
  language: en
  license: not accepted
  serviceAccountName: wauser
  aidaEngineLogLevel: "INFO"
  redisPwd: "default"
  defaultShardCount: 1
  enablePrometheus: true
  customPluginImageName: 
  pluginImageName: cp.icr.io/cp/ibm-workload-automation-plugins:10.1.0.00.20220722
  configPlugins:
  customLabels:
    - name: "environment"
      value: "prod"
waagent:
  enableAgent: true
  licenseType: "PVU"
  runAsUser: 999
  fsGroupId: 999
  supplementalGroupId:
  agent:
    containerDebug: false
    dynamic:
      certSecretName: waagent-cert-secret
      useSaaSConfig: false
      saasConfig:
        engine: sijr27wamxo-355.wa.ibmserviceengage.com
        subscriptionID:
        controllerHostname: wastagdal05gov.wa.ibmserviceengage.com
        userID:
        password:
      pools: null
      server:
        mdmhostname: null
        port: "31116"
      useCustomizedCert: false
    livenessProbe:
      initialDelaySeconds: 60
    name: WA_AGT
    networkpolicyEgress: {}
    # Allows all  Egress to mdm.
    #  - name: to-mdm
    #    egress:
    #    - to:
    #      - podSelector:
    #          matchLabels:
    #            app.kubernetes.io/name: waserver
    #    
    #  - name: dns
    #    egress:
    #    - to:
    #        - namespaceSelector:
    #            matchLabels:
    #              name: kube-system
    #    - ports:
    #        - port: 53
    #          protocol: UDP
    #        - port: 53
    #          protocol: TCP 
    nodeAffinityRequired: {}
    tz: null
  image:
    pullPolicy: Always
    repository: cp.icr.io/cp/ibm-workload-automation-agent-dynamic
    tag: 10.1.0.00.20220722
  persistence:
    dataPVC:
      name: data
      selector:
        label: ""
        value: ""
      size: 2Gi
      storageClassName: ""
    enabled: true
    useDynamicProvisioning: true
    extraVolumes: []
      # - name: custom-volume-1
      #   configMap:
      #      name: custom-configMap
      #      defaultMode: 0755
      # - name: custom-volume-2
      #   secret:
      #     secretName: custom-secret
      #     defaultMode: 0744
      # - name: nfs-volume
      #   nfs: 
      #     # URL for the NFS server
      #     server: <nfs_server> # Change this!
      #     path: /
    extraVolumeMounts: []
      # - name: custom-volume-1
      #   mountPath: /custom/mount/path-1
      #   readOnly: false
      # - name: custom-volume-2
      #   mountPath: /custom/mount/path-2
      # - name: nfs-volume
      #   mountPath: /path/nfs
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 200Mi
waconsole:
  enableConsole: true
  runAsUser: 999
  fsGroupId: 999
  supplementalGroupId:
  console:
    certSecretName: waconsole-cert-secret
    containerDebug: false
    enableSSO: true
    adminGroup:
    engineHostName:
    enginePort:
    db:
      adminUser: db2inst1
      hostname: dbhost
      alternateHostName:
      name: DWC
      port: 50000
      alternatePort:
      server:
      sslConnection: false
      tsName: null
      tsPath: null
      tsTempName: null
      tssbspace: null
      type: DB2
      usepartitioning: true
      user: db2inst1
    routes:
      enabled: true
    ingress:
      hostname:
      className:
      secretName: wa-console-ingress-secret
    exposeServiceType: Ingress
    exposeServiceAnnotation: {}
      #cert-manager.io/issuer: wa-ca-issuer
      #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      #service.beta.kubernetes.io/aws-load-balancer-type: "clb"
      #service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      #service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      #networking.gke.io/load-balancer-type: "Internal"
    networkpolicyEgress: {}
    # Allows all  Egress to mdm.
    #  - name: to-mdm
    #    egress:
    #    - to:
    #      - podSelector:
    #          matchLabels:
    #            app.kubernetes.io/name: waserver
    #    
    #  - name: dns
    #    egress:
    #    - to:
    #        - namespaceSelector:
    #            matchLabels:
    #              name: kube-system
    #    - ports:
    #        - port: 53
    #          protocol: UDP
    #        - port: 53
    #          protocol: TCP 
    nodeAffinityRequired: {}
    libConfigName: null
    livenessProbe:
      initialDelaySeconds: 100
    pwdSecretName: wa-pwd-secret
    useCustomizedCert: false
    tz:
  image:
    pullPolicy: Always
    repository: cp.icr.io/cp/ibm-workload-automation-console
    tag: 10.1.0.00.20220722
  persistence:
    dataPVC:
      name: data
      selector:
        label: ""
        value: ""
      size: 5Gi
      storageClassName: ""
    enabled: true
    useDynamicProvisioning: true
    extraVolumes: []
      # - name: custom-volume-1
      #   configMap:
      #      name: custom-configMap
      #      defaultMode: 0755
      # - name: custom-volume-2
      #   secret:
      #     secretName: custom-secret
      #     defaultMode: 0744
      # - name: nfs-volume
      #   nfs: 
      #     # URL for the NFS server
      #     server: <nfs_server> # Change this!
      #     path: /
    extraVolumeMounts: []
      # - name: custom-volume-1
      #   mountPath: /custom/mount/path-1
      #   readOnly: false
      # - name: custom-volume-2
      #   mountPath: /custom/mount/path-2
      # - name: nfs-volume
      #   mountPath: /path/nfs
  replicaCount: 1
  resources:
    limits:
      cpu: 4
      memory: 16Gi
    requests:
      cpu: 1
      memory: 4Gi
waserver:
  enableServer: true
  licenseType: "PVU"
  runAsUser: 999
  fsGroupId: 999
  supplementalGroupId:
  image:
    pullPolicy: Always
    repository: cp.icr.io/cp/ibm-workload-automation-server
    tag: 10.1.0.00.20220722
  persistence:
    dataPVC:
      name: data
      selector:
        label: ""
        value: ""
      size: 10Gi
      storageClassName: ""
    enabled: true
    useDynamicProvisioning: true
    extraVolumes: []
      # - name: custom-volume-1
      #   configMap:
      #      name: custom-configMap
      #      defaultMode: 0755
      # - name: custom-volume-2
      #   secret:
      #     secretName: custom-secret
      #     defaultMode: 0744
      # - name: nfs-volume
      #   nfs: 
      #     # URL for the NFS server
      #     server: <nfs_server> # Change this!
      #     path: /
    extraVolumeMounts: []
      # - name: custom-volume-1
      #   mountPath: /custom/mount/path-1
      #   readOnly: false
      # - name: custom-volume-2
      #   mountPath: /custom/mount/path-2
      # - name: nfs-volume
      #   mountPath: /path/nfs
  enableBmEventsLogging: false
  bmEvents: |-
    OPTIONS=MASTER
    LOGGING=ALL
    CHSCHED=HIGH
    PIPE=/home/wauser/wadata/MAGENT.P
    FILE=/home/wauser/wadata/event.log
    JSON=/home/wauser/wadata/event.json
  replicaCount: 1
  resources:
    limits:
      cpu: 4
      memory: 16Gi
    requests:
      cpu: 1
      memory: 4Gi
  server:
    jobLog:
      type: memory
      corePoolSize: 50
    ftaName: 
    agentName: WA_SAGT
    certSecretName: waserver-cert-secret
    company: my-company
    externalFileProxyEnabled: false
    externalFileProxyURLs: ""
    containerDebug: false
    enableSSO: true
    enableSingleInstaceNetwork: false
    adminGroup:
    createPlan: true
    dateFormat: MM/DD/YYYY
    db:
      adminUser: db2inst1
      hostname: dbhost
      alternateHostName:
      name: TWS
      port: 50000
      alternatePort:
      server:
      sslConnection: false
      tsLogName: null
      tsLogPath: null
      tsName: null
      tsPath: null
      tsPlanName: null
      tsPlanPath: null
      tsTempName: null
      tssbspace: null
      type: DB2
      usepartitioning: true
      user: db2inst1
    routes:
      enabled: true
      hostname:
    ingress:
      hostname:
      className:
      secretName: wa-server-ingress-secret
    exposeServiceType: Ingress
    exposeServiceAnnotation: {}
      #cert-manager.io/issuer: wa-ca-issuer
      #service.beta.kubernetes.io/aws-load-balancer-type: nlb
      #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      #service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      #networking.gke.io/load-balancer-type: "Internal"
    networkpolicyEgress: {}
    # Allows all  Egress to mdm.
    #  - name: to-mdm
    #    egress:
    #    - to:
    #      - podSelector:
    #          matchLabels:
    #            app.kubernetes.io/name: waserver
    #    
    #  - name: dns
    #    egress:
    #    - to:
    #        - namespaceSelector:
    #            matchLabels:
    #              name: kube-system
    #    - ports:
    #        - port: 53
    #          protocol: UDP
    #        - port: 53
    #          protocol: TCP 
    nodeAffinityRequired: {}
    libConfigName: null
    licenseServerId: null
    licenseServerUrl: null
    readinessProbe:
      initialDelaySeconds: 530
    livenessProbe:
      initialDelaySeconds: 600
    pwdSecretName: wa-pwd-secret
    startOfDay: "0700"
    timezone: null
    tz: null
    useCustomizedCert: false  
wafileproxy:
  enableFileProxy: false
  replicaCount: 1
  image:
    repository: cp.icr.io/cp/ibm-workload-automation-fileproxy
    tag: 10.1.0.00.20220722
    pullPolicy: Always
  nameOverride: ""
  fullnameOverride: ""
  pwdSecretName: wa-pwd-secret-fp
  fileProxy:
    certSecretName: wa-fileproxy-cert
    useCustomizedCert: false
    containerDebug: false
    port: 44444
    route:
      enabled: false
    exposeServiceType: Ingress
    exposeServiceAnnotation: {}
      #cert-manager.io/issuer: wa-ca-issuer
      #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      #service.beta.kubernetes.io/aws-load-balancer-type: "clb"
      #service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      #service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      #networking.gke.io/load-balancer-type: "Internal"
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: 
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 999
  ingress:
    className:
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: 
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
waaida:
  enableAIDA: false
  aida-ad:
    image:
      repository: cp.icr.io/cp/ibm-aida-ad
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 0.5
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetMemoryUtilizationPercentage: 80
  aida-es:
    esDiscoveryType: "single-node"
    #discoverySeedHosts: hostname,[::1]
    #clusterInitialMasterNode: node-1
    image:
      repository: amazon/opendistro-for-elasticsearch
      tag: "1.13.3"
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    persistence:
      # Determine whether to use Persistent Volumes for the pods
      enabled: true
      # Determine whether to use Storage Classes to dynamically create Persistent Volumes for the pods
      useDynamicProvisioning: true
      #
      # Settings for the pod Persistent Volume Claims,
      # which each pod uses for data
      dataPVC:
        # Name of the Storage Class to use. If no Storage Class is used, leave an empty string
        storageClassName: ""
        # If your not using dynamic provisioning, you can use selectors to
        # refine the binding process. You cannot specify a selector if you are using dynamic provisioning!
        selector:
          label: ""
          value: ""
        # Minimum size of the Persistent Volume
        size: 10Gi
    resources:
      limits:
        cpu: 4
        memory: 8Gi
      requests:
        cpu: 0.5
        memory: 1Gi
  aida-exporter:
    # specifiy the WA Server hostname (internal or external service/route)
    waHostName: ""
    waPort: 31116
    httpAuthUsername: "wauser"
    httpAuthPasswordSecretName: wa-pwd-secret
    image:
      repository: cp.icr.io/cp/ibm-aida-exporter
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 0.5
        memory: 0.5Gi
  aida-email:
    smtpServer: "smtp.server.com"
    smtpPort: "587"
    senderEmailId: "smtp@server.com"
    senderEmailPwd: "smtpPassword"
    recipientMailIds: "mail1@mail.com,mail2@mail.com"
    image:
      repository: cp.icr.io/cp/ibm-aida-email
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 200m
        memory: 0.5Gi
  aida-nginx:
    waConsoleCertSecretName: waconsole-cert-secret
    image:
      repository: cp.icr.io/cp/ibm-aida-nginx
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    routes:
      enabled: true
    ingress:
      hostname:
      secretName: wa-console-ingress-secret
    exposeServiceType: LoadBalancer
    exposeServiceAnnotation:
      {}
      #cert-manager.io/issuer: wa-ca-issuer
      #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      #service.beta.kubernetes.io/aws-load-balancer-type: "clb"
      #service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      #service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      #networking.gke.io/load-balancer-type: "Internal"
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 200Mi
  aida-orchestrator:
    image:
      repository: cp.icr.io/cp/ibm-aida-orchestrator
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 0.5
        memory: 0.5Gi
  aida-predictor:
    image:
      repository: cp.icr.io/cp/ibm-aida-predictor
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 8
        memory: 16Gi
      requests:
        cpu: 1
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetMemoryUtilizationPercentage: 80
  aida-redis:
    image:
      repository: cp.icr.io/cp/ibm-aida-redis
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 1
        memory: 500Mi
      requests:
        cpu: 200m
        memory: 200Mi
  aida-ui:
    uiLogLevel: "ERROR:*,INFO:*,-TRACE:*"
    image:
      repository: cp.icr.io/cp/ibm-aida-ui
      tag: 10.1.0.00.20220304
      pullPolicy: Always
    serviceAccount:
      create: false
      annotations: {}
      name: ""
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 0.3
        memory: 0.5Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80